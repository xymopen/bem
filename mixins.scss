@import "function";

// BEM

$__BEM: null;

@mixin b($block) {
  $lastBEM: $__BEM;
  $__BEM: ($block, null, null) !global;

  @if null == $block {
    @error "Argument `$block` of mixin \"b\" must not be null";
  } @else {
    .#{bem($block)} {
      @content;
    }
  }

  $__BEM: $lastBEM !global;
}

@mixin e($elements) {
  @if null == $__BEM {
    @error "Base-level rules cannot contain an element mixin";
  } @else if null != nth($__BEM, 2) {
    @error "Element-level rules cannot contain another element mixin";
  } @else {
    $block: nth($__BEM, 1);

    $lastBEM: $__BEM;
    $__BEM: ($block, $elements, null) !global;

    $parent: ".#{bem($block)}";
    $current: ();

    @each $element in $elements {
      @if null == $element {
        @error "Argument `$elements` of mixin \"e\" must not contains null";
      } @else {
        $current: append(
          $current,
          bem-extend(__selector-ensure(&), $parent, ".#{bem($block, $element)}"),
          "comma",
        );
      }
    }

    @at-root {
      #{$current} {
        @content;
      }
    }

    $__BEM: $lastBEM !global;
  }
}

@mixin m($modifiers) {
  @if null == $__BEM {
    @error "Base-level rules cannot contain a modifier mixin";
  } @else if null != nth($__BEM, 3) {
    @error "Modifier-level rules cannot contain another modifier mixin";
  } @else {
    $block: nth($__BEM, 1);
    $elements: nth($__BEM, 2);

    @if (null == $elements) {
      $elements: (null);
    }

    $lastBEM: $__BEM;
    $__BEM: ($block, $elements, $modifiers) !global;

    @each $element in $elements {
      $parent: ".#{bem($block, $element)}";
      $current: ();

      @each $modifier in $modifiers {
        @if null == $modifier {
          @error "Argument `$modifiers` of mixin \"m\" must not contains null";
        } @else {
          $current: append(
            $current,
            bem-extend(__selector-ensure(&), $parent, ".#{bem($block, $element, $modifier)}"),
            "comma",
          );
        }
      }

      @at-root {
        #{$current} {
          @content;
        }
      }
    }

    $__BEM: $lastBEM !global;
  }
}

@mixin when($state) {
  @at-root {
    &.#{$state-prefix + $state} {
      @content;
    }
  }
}

@mixin extend-rule($name) {
  @extend #{'%shared-'+$name};
}

@mixin share-rule($name) {
  $rule-name: '%shared-'+$name;

  @at-root #{$rule-name} {
    @content;
  }
}

@mixin pseudo($pseudo) {
  @at-root #{&}#{':#{$pseudo}'} {
    @content;
  }
}
